// <auto-generated />
using System;
using KindnessAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KindnessAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240916014234_UpdateActTable")]
    partial class UpdateActTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KindnessAPI.Models.Act", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Difficulty")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ImpactType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TimeRequired")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Acts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Action = "Hold the door open for someone",
                            CreatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3459),
                            Difficulty = "Simple",
                            ImpactType = "Personal",
                            LocationType = "Local",
                            TimeRequired = "Quick",
                            UpdatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3460)
                        },
                        new
                        {
                            Id = 2,
                            Action = "Donate to a local charity",
                            CreatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3462),
                            Difficulty = "Moderate",
                            ImpactType = "Community",
                            LocationType = "Local",
                            TimeRequired = "Medium",
                            UpdatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3463)
                        },
                        new
                        {
                            Id = 3,
                            Action = "Plant a tree",
                            CreatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3465),
                            Difficulty = "Challenging",
                            ImpactType = "Environmental",
                            LocationType = "Local",
                            TimeRequired = "Long",
                            UpdatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3465)
                        },
                        new
                        {
                            Id = 4,
                            Action = "Leave a positive review for a local business",
                            CreatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3467),
                            Difficulty = "Simple",
                            ImpactType = "Community",
                            LocationType = "Virtual",
                            TimeRequired = "Quick",
                            UpdatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3467)
                        },
                        new
                        {
                            Id = 5,
                            Action = "Send a thank you note to a friend",
                            CreatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3469),
                            Difficulty = "Simple",
                            ImpactType = "Personal",
                            LocationType = "Virtual",
                            TimeRequired = "Quick",
                            UpdatedAt = new DateTime(2024, 9, 16, 1, 42, 34, 47, DateTimeKind.Utc).AddTicks(3470)
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
